{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Score/Score.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","clickCount","id","alt","name","src","image","Wrapper","children","Score","score","highscore","App","state","cards","gameOver","setState","console","log","this","forEach","card","count","alert","find","o","i","sort","Math","random","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8hCAWeA,G,MARF,SAAAC,GAAK,OAChB,yBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,WAAWH,EAAMI,MAC1D,yBAAKH,UAAU,iBACb,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,YCDxBC,G,MAFC,SAAAT,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAMU,YCS1CC,G,MATD,SAAAX,GAAK,OACjB,yBAAKC,UAAU,UACb,yBAAKA,UAAU,SAASD,EAAMU,UAC9B,yBAAKT,UAAU,UAAf,UACUD,EAAMY,MADhB,eACmCZ,EAAMa,c,OCkE9BC,G,kNA9DZC,MAAQ,CACPC,QACAJ,MAAO,EACPC,UAAW,G,EAGbI,SAAW,WAWT,OAVI,EAAKF,MAAMH,MAAQ,EAAKG,MAAMF,WAChC,EAAKK,SAAS,CAACL,UAAW,EAAKE,MAAMH,QAAQ,WAC3CO,QAAQC,IAAIC,KAAKN,MAAMF,cAG3B,EAAKE,MAAMC,MAAMM,SAAQ,SAAAC,GACvBA,EAAKC,MAAQ,KAEfC,MAAM,gEAAD,OAAiE,EAAKV,MAAMH,QACjF,EAAKM,SAAS,CAACN,MAAO,KACf,G,EAGTT,WAAa,SAAAC,GACX,EAAKW,MAAMC,MAAMU,MAAK,SAACC,EAAGC,GACxB,GAAID,EAAEvB,KAAOA,EAAI,CACf,GAAsB,IAAnBY,EAAMY,GAAGJ,MAMV,OALAR,EAAMY,GAAGJ,MAAQR,EAAMY,GAAGJ,MAAQ,EAClC,EAAKN,SAAS,CAACN,MAAQ,EAAKG,MAAMH,MAAQ,IAAI,WAC5CO,QAAQC,IAAIC,KAAKN,MAAMH,UAEzB,EAAKG,MAAMC,MAAMa,MAAK,kBAAMC,KAAKC,SAAW,OACrC,EAEP,EAAKd,gB,uDAMH,IAAD,OACP,OACE,yBAAKhB,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,qBACA,uBAAGA,UAAU,aAAb,wEAIJ,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAOW,MAAOS,KAAKN,MAAMH,MAAOC,UAAWQ,KAAKN,MAAMF,YACrDQ,KAAKN,MAAMC,MAAMgB,KAAI,SAAAT,GAAI,OACxB,kBAAC,EAAD,CACEpB,WAAY,EAAKA,WACjBC,GAAImB,EAAKnB,GACT6B,IAAKV,EAAKnB,GACVI,MAAOe,EAAKf,iB,GAvDN0B,cCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1d76646e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => (\r\n  <div className=\"card\" onClick={() => props.clickCount(props.id)}>\r\n    <div className=\"img-container\">\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Score.css\";\r\n\r\nconst Score = props => (\r\n  <div className=\"header\">\r\n    <div className=\"title\">{props.children}</div>\r\n    <div className=\"scores\">\r\n      Score: {props.score} Highscore: {props.highscore}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Score;","import React, { Component } from 'react';\r\nimport Card from \"./components/Card\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Score from \"./components/Score\";\r\nimport cards from \"./cards.json\";\r\nimport './App.css';\r\n\r\n\r\n//setup (initialize) state variables\r\nclass App extends Component {\r\n   // Sets this.state.cards to the cards json array\r\n   state = {\r\n    cards,\r\n    score: 0,\r\n    highscore: 1\r\n  };\r\n//end of game\r\n  gameOver = () => {\r\n    if (this.state.score > this.state.highscore) {\r\n      this.setState({highscore: this.state.score}, function() {\r\n        console.log(this.state.highscore);\r\n      });\r\n    }\r\n    this.state.cards.forEach(card => {\r\n      card.count = 0;\r\n    });\r\n    alert(`Oops, you clicked twice! Game Over! Try Again! \\nYour Score: ${this.state.score}`);\r\n    this.setState({score: 0});\r\n    return true;\r\n  }\r\n//shuffle the cards\r\n  clickCount = id => {\r\n    this.state.cards.find((o, i) => {\r\n      if (o.id === id) {\r\n        if(cards[i].count === 0){\r\n          cards[i].count = cards[i].count + 1;\r\n          this.setState({score : this.state.score + 1}, function(){\r\n            console.log(this.state.score);\r\n          });\r\n          this.state.cards.sort(() => Math.random() - 0.5)\r\n          return true; \r\n        } else {\r\n          this.gameOver();\r\n        }\r\n      }\r\n    });\r\n  }\r\n  // Map over this.state.cards and render a cardCard component for each card object\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1 className=\"App-title\">Marvel Click Game</h1>\r\n          <p className=\"App-intro\">\r\n           Don't click the same image twice! The highest Possible Score is 16.\r\n          </p>\r\n        </header>\r\n      <Wrapper>\r\n        <Score score={this.state.score} highscore={this.state.highscore}></Score>\r\n        {this.state.cards.map(card => (\r\n          <Card\r\n            clickCount={this.clickCount}\r\n            id={card.id}\r\n            key={card.id}\r\n            image={card.image}\r\n          />\r\n        ))}\r\n      </Wrapper>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}